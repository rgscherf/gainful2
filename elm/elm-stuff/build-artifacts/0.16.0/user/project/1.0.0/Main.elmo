Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models = Elm.Models.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Site = Elm.Site.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var decodeJob = A9($Json$Decode.object8,
   $Models.Job,
   A2($Json$Decode._op[":="],"title",$Json$Decode.string),
   A2($Json$Decode._op[":="],"organization",$Json$Decode.string),
   A2($Json$Decode._op[":="],"division",$Json$Decode.string),
   A2($Json$Decode._op[":="],"url_detail",$Json$Decode.string),
   A2($Json$Decode._op[":="],"date_closing",$Json$Decode.string),
   A2($Json$Decode._op[":="],"salary_waged",$Json$Decode.bool),
   A2($Json$Decode._op[":="],"salary_amount",$Json$Decode.$float),
   A2($Json$Decode._op[":="],"region",$Json$Decode.string));
   var decodeJobList = $Json$Decode.list(decodeJob);
   var jobsUrl = "http://localhost:8000/jobs/";
   var getJobs = $Effects.task(A2($Task.map,$Models.ShowInitialJobs,$Task.toMaybe(A2($Http.get,decodeJobList,jobsUrl))));
   var makeFilter$ = F2(function (j,f) {
      var _p0 = A2($Dict.get,j.region,f.allRegions);
      if (_p0.ctor === "Nothing") {
            return _U.update(f,
            {allRegions: A3($Dict.insert,j.region,_U.list([j.organization]),f.allRegions),allOrgs: A3($Dict.insert,j.organization,j.region,f.allOrgs)});
         } else {
            var _p1 = A2($List.member,j.organization,_p0._0);
            if (_p1 === true) {
                  return f;
               } else {
                  return _U.update(f,
                  {allOrgs: A3($Dict.insert,j.organization,j.region,f.allOrgs)
                  ,allRegions: A3($Dict.update,
                  j.region,
                  function (xs) {
                     return $Maybe.Just(A2($List._op["::"],j.organization,A2($Maybe.withDefault,_U.list([]),xs)));
                  },
                  f.allRegions)});
               }
         }
   });
   var makeAllEntitiesVisible = function (f) {    return _U.update(f,{visibleOrgs: $Dict.keys(f.allOrgs),visibleRegions: $Dict.keys(f.allRegions)});};
   var makeFilter = F2(function (f,m) {
      return _U.update(m,{jobFilter: makeAllEntitiesVisible(A3($List.foldr,makeFilter$,f,A2($Maybe.withDefault,_U.list([]),m.jobs)))});
   });
   var toggleFilter = F3(function (field,identifier,fil) {
      var _p2 = field;
      switch (_p2.ctor)
      {case "Region": return A2($List.member,identifier,fil.visibleRegions) ? _U.update(fil,
           {visibleRegions: A2($List.filter,function (x) {    return !_U.eq(x,identifier);},fil.visibleRegions)
           ,visibleOrgs: A2($List.filter,
           function (x) {
              return $Basics.not(A2($List.member,x,A2($Maybe.withDefault,_U.list([]),A2($Dict.get,identifier,fil.allRegions))));
           },
           fil.visibleOrgs)}) : _U.update(fil,
           {visibleRegions: A2($List._op["::"],identifier,fil.visibleRegions)
           ,visibleOrgs: $Set.toList($Set.fromList(A2($Basics._op["++"],
           A2($Maybe.withDefault,_U.list([]),A2($Dict.get,identifier,fil.allRegions)),
           fil.visibleOrgs)))});
         case "Organization": if (A2($List.member,identifier,fil.visibleOrgs)) {
                 var newFil = _U.update(fil,{visibleOrgs: A2($List.filter,function (x) {    return !_U.eq(x,identifier);},fil.visibleOrgs)});
                 return _U.update(newFil,
                 {visibleRegions: A2($List.any,
                 function (x) {
                    return A2($List.member,x,newFil.visibleOrgs);
                 },
                 A2($Maybe.withDefault,
                 _U.list([]),
                 A2($Dict.get,A2($Maybe.withDefault,"",A2($Dict.get,identifier,newFil.allOrgs)),newFil.allRegions))) ? newFil.visibleRegions : A2($List.filter,
                 function (x) {
                    return !_U.eq(x,identifier);
                 },
                 newFil.visibleRegions)});
              } else return _U.update(fil,
              {visibleOrgs: A2($List._op["::"],identifier,fil.visibleOrgs)
              ,visibleRegions: A2($List.all,
              function (x) {
                 return A2($List.member,x,fil.visibleOrgs);
              },
              A2($Maybe.withDefault,_U.list([]),A2($Dict.get,identifier,fil.allRegions))) ? A2($List.member,
              A2($Maybe.withDefault,"",A2($Dict.get,identifier,fil.allOrgs)),
              fil.visibleRegions) ? fil.visibleRegions : A2($List._op["::"],
              A2($Maybe.withDefault,"",A2($Dict.get,identifier,fil.allOrgs)),
              fil.visibleRegions) : fil.visibleRegions});
         default: return fil;}
   });
   var update = F2(function (action,model) {
      var _p3 = action;
      switch (_p3.ctor)
      {case "SortJobs": return {ctor: "_Tuple2",_0: A2($Models.sortJobs,_p3._0,model),_1: $Effects.none};
         case "NoOp": return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "GetJobs": return {ctor: "_Tuple2",_0: _U.update(model,{jobs: $Maybe.Nothing}),_1: getJobs};
         case "ShowInitialJobs": var newModel = A2(makeFilter,model.jobFilter,_U.update(model,{jobs: _p3._0}));
           return {ctor: "_Tuple2",_0: A2($Models.sortJobs,$Models.Organization,newModel),_1: $Effects.none};
         case "ToggleFilter": return {ctor: "_Tuple2",_0: _U.update(model,{jobFilter: A3(toggleFilter,_p3._0,_p3._1,model.jobFilter)}),_1: $Effects.none};
         default: return {ctor: "_Tuple2",_0: model,_1: $Effects.none};}
   });
   var startFilter = {allRegions: $Dict.empty,allOrgs: $Dict.empty,visibleRegions: _U.list([]),visibleOrgs: _U.list([])};
   var startModel = {jobs: $Maybe.Nothing,jobFilter: startFilter};
   var init = {ctor: "_Tuple2",_0: startModel,_1: getJobs};
   var app = $StartApp.start({init: init,view: $Site.view,update: update,inputs: _U.list([])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   return _elm.Main.values = {_op: _op
                             ,app: app
                             ,main: main
                             ,startFilter: startFilter
                             ,startModel: startModel
                             ,init: init
                             ,update: update
                             ,toggleFilter: toggleFilter
                             ,makeFilter: makeFilter
                             ,makeAllEntitiesVisible: makeAllEntitiesVisible
                             ,makeFilter$: makeFilter$
                             ,jobsUrl: jobsUrl
                             ,getJobs: getJobs
                             ,decodeJob: decodeJob
                             ,decodeJobList: decodeJobList};
};