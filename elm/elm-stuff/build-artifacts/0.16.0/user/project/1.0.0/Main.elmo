Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Models = Elm.Models.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Site = Elm.Site.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var decodeJob = A8($Json$Decode.object7,
   $Models.Job,
   A2($Json$Decode._op[":="],"title",$Json$Decode.string),
   A2($Json$Decode._op[":="],"organization",$Json$Decode.string),
   A2($Json$Decode._op[":="],"division",$Json$Decode.string),
   A2($Json$Decode._op[":="],"url_detail",$Json$Decode.string),
   A2($Json$Decode._op[":="],"date_closing",$Json$Decode.string),
   A2($Json$Decode._op[":="],"salary_waged",$Json$Decode.bool),
   A2($Json$Decode._op[":="],"salary_amount",$Json$Decode.$float));
   var decodeJobList = $Json$Decode.list(decodeJob);
   var jobsUrl = "http://localhost:8000/jobs/";
   var getJobs = $Effects.task(A2($Task.map,$Models.ShowInitialJobs,$Task.toMaybe(A2($Http.get,decodeJobList,jobsUrl))));
   var updateFilter = F3(function (field,identifier,fil) {
      var toggleElement = F2(function (i,ls) {
         return A2($List.map,
         function (_p0) {
            var _p1 = _p0;
            var _p3 = _p1._0;
            var _p2 = _p1._1;
            return !_U.eq(_p3,identifier) ? {ctor: "_Tuple2",_0: _p3,_1: _p2} : {ctor: "_Tuple2",_0: _p3,_1: $Basics.not(_p2)};
         },
         ls);
      });
      var _p4 = field;
      switch (_p4.ctor)
      {case "Organization": return _U.update(fil,{organizations: A2(toggleElement,identifier,fil.organizations)});
         case "Title": return fil;
         case "Salary": return fil;
         default: return fil;}
   });
   var changeAllFilter = F3(function (field,state,fil) {
      var changeAllStates = F2(function (state,ls) {
         return A2($List.map,function (_p5) {    var _p6 = _p5;return {ctor: "_Tuple2",_0: _p6._0,_1: state};},ls);
      });
      var _p7 = field;
      switch (_p7.ctor)
      {case "Organization": return _U.update(fil,{organizations: A2(changeAllStates,state,fil.organizations)});
         case "Title": return fil;
         case "Salary": return fil;
         default: return fil;}
   });
   var update = F2(function (action,model) {
      var _p8 = action;
      switch (_p8.ctor)
      {case "SortJobs": return {ctor: "_Tuple2",_0: A2($Models.sortJobs,_p8._0,model),_1: $Effects.none};
         case "NoOp": return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "GetJobs": return {ctor: "_Tuple2",_0: _U.update(model,{jobs: $Maybe.Nothing}),_1: getJobs};
         case "ShowInitialJobs": var newModel = $Models.makeFilter(_U.update(model,{jobs: _p8._0}));
           return {ctor: "_Tuple2",_0: A2($Models.sortJobs,$Models.Organization,newModel),_1: $Effects.none};
         case "ToggleFilter": return {ctor: "_Tuple2",_0: _U.update(model,{jobFilter: A3(updateFilter,_p8._0,_p8._1,model.jobFilter)}),_1: $Effects.none};
         default: return {ctor: "_Tuple2",_0: _U.update(model,{jobFilter: A3(changeAllFilter,_p8._0,_p8._1,model.jobFilter)}),_1: $Effects.none};}
   });
   var startModel = {jobs: $Maybe.Nothing,jobFilter: {organizations: _U.list([])}};
   var init = {ctor: "_Tuple2",_0: startModel,_1: getJobs};
   var app = $StartApp.start({init: init,view: $Site.view,update: update,inputs: _U.list([])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   return _elm.Main.values = {_op: _op
                             ,app: app
                             ,main: main
                             ,startModel: startModel
                             ,init: init
                             ,update: update
                             ,changeAllFilter: changeAllFilter
                             ,updateFilter: updateFilter
                             ,jobsUrl: jobsUrl
                             ,getJobs: getJobs
                             ,decodeJob: decodeJob
                             ,decodeJobList: decodeJobList};
};